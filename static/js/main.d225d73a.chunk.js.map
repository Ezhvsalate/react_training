{"version":3,"sources":["components/FinishedQuiz/FinishedQuiz.module.css","components/Navigation/MenuToggle/MenuToggle.module.css","components/Navigation/Drawer/Drawer.module.css","containers/Quiz/Quiz.module.css","components/ActiveQuiz/ActiveQuiz.module.css","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.css","components/UI/Button/Button.module.css","hoc/Layout/Layout.module.css","components/UI/Backdrop/Backdrop.module.css","components/ActiveQuiz/AnswersList/AnswersList.module.css","components/Navigation/MenuToggle/MenuToggle.js","components/UI/Backdrop/Backdrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuToggle","props","cls","classes","isOpen","open","onClick","onToggle","className","join","Backdrop","links","Drawer","map","link","index","key","this","close","Fragment","renderLinks","onClose","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswerItem","push","onAnswerClick","answer","id","text","AnswersList","console","log","answers","ActiveQuiz","Question","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","successCounter","Object","keys","results","reduce","total","quiz","quizItem","success","error","length","onRetry","Quiz","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d225d73a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__27Mo1\",\"success\":\"FinishedQuiz_success__1JIed\",\"error\":\"FinishedQuiz_error__1NK2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuToggle\":\"MenuToggle_MenuToggle__1L-Zp\",\"open\":\"MenuToggle_open__2OCEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Drawer\":\"Drawer_Drawer__3i-XY\",\"close\":\"Drawer_close__s4EKF\",\"active\":\"Drawer_active__2KEkH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__2wya1\",\"QuizWrapper\":\"Quiz_QuizWrapper__191J4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__3VjB-\",\"Question\":\"ActiveQuiz_Question__pSzK-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__BfScg\",\"success\":\"AnswerItem_success__33WEN\",\"error\":\"AnswerItem_error__wq5cF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1hbkP\",\"success\":\"Button_success__vUGQE\",\"error\":\"Button_error__15lok\",\"primary\":\"Button_primary__31y4A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__38ghg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3wxm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__2CRBX\"};","import React from \"react\";\r\nimport classes from './MenuToggle.module.css'\r\n\r\n\r\nconst MenuToggle = props => {\r\n    const cls = [\r\n        classes.MenuToggle,\r\n        'fa',\r\n        props.isOpen ? 'fa-times ' + classes.open : 'fa-bars'\r\n    ];\r\n\r\n    return (<i onClick={props.onToggle} className={cls.join(' ')}/>)\r\n};\r\n\r\nexport default MenuToggle","import React from \"react\";\r\nimport classes from './Backdrop.module.css'\r\n\r\nconst Backdrop = props => <div className={classes.Backdrop} onClick={props.onClick}/>;\r\n\r\nexport default Backdrop","import React, {Component} from \"react\";\r\nimport classes from './Drawer.module.css'\r\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\r\n\r\nconst links = ['1', '2', '3'];\r\n\r\nclass Drawer extends Component {\r\n\r\n    renderLinks() {\r\n        return links.map((link, index) => {\r\n            return (\r\n                <li key={index}><a>{link}</a></li>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const cls = [classes.Drawer,\r\n            !this.props.isOpen ? classes.close : null];\r\n        return (\r\n            <React.Fragment>\r\n                <nav className={cls.join(' ')}>\r\n                    <ul>\r\n                        {this.renderLinks()}\r\n                    </ul>\r\n                </nav>\r\n                {this.props.isOpen ? <Backdrop onClick={this.props.onClose}/> : null}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drawer","import React, {Component} from \"react\";\r\nimport classes from './Layout.module.css'\r\nimport MenuToggle from '../../components/Navigation/MenuToggle/MenuToggle'\r\nimport Drawer from \"../../components/Navigation/Drawer/Drawer\";\r\n\r\nclass Layout extends Component {\r\n\r\n    state = {\r\n        menu: false\r\n    };\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({menu: !this.state.menu})\r\n    };\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({menu: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <Drawer\r\n                    isOpen={this.state.menu}\r\n                    onClose={this.menuCloseHandler}\r\n                />\r\n                <MenuToggle\r\n                    isOpen={this.state.menu}\r\n                    onToggle={this.toggleMenuHandler}\r\n                />\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from \"react\";\r\nimport classes from './AnswerItem.module.css'\r\n\r\nconst AnswerItem = props => {\r\n    const cls = [classes.AnswerItem];\r\n    if (props.state) {\r\n        cls.push(classes[props.state])\r\n    }\r\n\r\n    return (<li className={cls.join(' ')}\r\n                onClick={() => props.onAnswerClick(props.answer.id)}>\r\n        {props.answer.text}\r\n    </li>)\r\n};\r\n\r\n\r\nexport default AnswerItem","import React from \"react\";\r\nimport classes from './AnswersList.module.css'\r\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\r\n\r\nconst AnswersList = props => {\r\n    console.log(props);\r\n    return (\r\n        <ul className={classes.AnswersList}>\r\n            {props.answers.map((answer, index) => {\r\n                return (<AnswerItem\r\n                    onAnswerClick={props.onAnswerClick}\r\n                    key={index}\r\n                    answer={answer}\r\n                    state={props.state ? props.state[answer.id] : null}\r\n                />)\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\n\r\nexport default AnswersList","import React from \"react\";\r\nimport classes from './ActiveQuiz.module.css'\r\nimport AnswersList from \"./AnswersList/AnswersList\";\r\n\r\nconst ActiveQuiz = props => {\r\n\r\n    return (\r\n        <div className={classes.ActiveQuiz}>\r\n            <p className={classes.Question}>\r\n            <span>\r\n                <strong>{props.answerNumber}.</strong>&nbsp;\r\n                {props.question}\r\n            </span>\r\n                <small>{props.answerNumber} из {props.quizLength}</small>\r\n            </p>\r\n            <AnswersList\r\n                answers={props.answers}\r\n                onAnswerClick={props.onAnswerClick}\r\n                state={props.state}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActiveQuiz","import React from \"react\";\r\nimport classes from './Button.module.css'\r\n\r\nconst Button = props => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ];\r\n\r\n    return (\r\n        <button onClick={props.onClick}\r\n                className={cls.join(' ')}\r\n                disabled={props.disabled}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default Button","import React from \"react\";\r\nimport classes from './FinishedQuiz.module.css'\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nconst FinishedQuiz = props => {\r\n    const successCounter = Object.keys(props.results).reduce((total, key) => {\r\n        if (props.results[key] === 'success') {\r\n            total++\r\n        }\r\n        return total\r\n    }, 0);\r\n\r\n    return (<div className={classes.FinishedQuiz}>\r\n        <ul>\r\n            {props.quiz.map((quizItem, index) => {\r\n                const cls = [\r\n                    'fa',\r\n                    props.results[quizItem.id] === 'success' ? 'fa-check ' + classes.success : 'fa-times ' + classes.error\r\n                ];\r\n                return (\r\n                    <li key={index}>\r\n                        <strong>{index + 1}</strong>.&nbsp;\r\n                        {quizItem.question}\r\n                        <i className={cls.join(' ')}/>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n        <p>Правильно: {successCounter} из {props.quiz.length}</p>\r\n        <div>\r\n            <Button onClick={props.onRetry} type=\"primary\">Повторить</Button>\r\n            <Button type=\"success\">Перейти в список тестов</Button>\r\n\r\n        </div>\r\n    </div>)\r\n};\r\nexport default FinishedQuiz","import React, {Component} from \"react\";\r\nimport classes from './Quiz.module.css'\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\"\r\n\r\nexport const ERROR = 'error';\r\nexport const SUCCESS = 'success';\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        results: {},  // {[id]: 'success' || 'error'}\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        answerState: null, // {[id]: 'success' || 'error'}\r\n        quiz: [{\r\n            id: 1,\r\n            question: 'Че каво, епт?',\r\n            rightAnswerId: 3,\r\n            answers: [\r\n                {text: 'Не, ничо', id: 1},\r\n                {text: 'Отвали', id: 2},\r\n                {text: 'Все огонь', id: 3},\r\n                {text: 'Все, пока', id: 4},\r\n            ]\r\n        }, {\r\n            id: 2,\r\n            question: 'Кто чаво, епт?',\r\n            rightAnswerId: 1,\r\n            answers: [\r\n                {text: 'Я хз', id: 1},\r\n                {text: 'Ты достал', id: 2},\r\n                {text: 'Ой все', id: 3},\r\n                {text: 'Ну ура', id: 4},\r\n            ]\r\n        }]\r\n    };\r\n\r\n\r\n    isQuizFinished() {\r\n        return !(this.state.activeQuestion + 1 < this.state.quiz.length)\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n        console.log(answerId);\r\n        if (this.state.answerState) {\r\n            const key = Object.keys(this.state.answerState)[0];\r\n            if (this.state.answerState[key] === SUCCESS) {\r\n                return\r\n            }\r\n        }\r\n        const question = this.state.quiz[this.state.activeQuestion];\r\n        const results = this.state.results;\r\n        if (question.rightAnswerId === answerId) {\r\n            if (!results[question.id]) {\r\n                results[question.id] = SUCCESS\r\n            }\r\n            this.setState({\r\n                answerState: {[answerId]: SUCCESS},\r\n                results: results\r\n            });\r\n            const timeout = window.setTimeout(() => {\r\n                if (!this.isQuizFinished()) {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    })\r\n                } else {\r\n                    this.setState({isFinished: true});\r\n                }\r\n                window.clearTimeout(timeout)\r\n            }, 1000);\r\n\r\n        } else {\r\n            results[question.id] = ERROR;\r\n            this.setState({\r\n                answerState: {[answerId]: ERROR},\r\n                results: results\r\n            });\r\n        }\r\n    };\r\n\r\n    retryHandler = () => {\r\n        this.setState({\r\n            results: {},\r\n            isFinished: false,\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n                    <h1>Ответьте на все вопросы</h1>\r\n                    {\r\n                        this.state.isFinished ?\r\n                            <FinishedQuiz results={this.state.results}\r\n                                          quiz={this.state.quiz}\r\n                                          onRetry={this.retryHandler}\r\n                            />\r\n                            :\r\n                            <ActiveQuiz question={this.state.quiz[this.state.activeQuestion].question}\r\n                                        answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                                        onAnswerClick={this.onAnswerClickHandler}\r\n                                        quizLength={this.state.quiz.length}\r\n                                        answerNumber={this.state.activeQuestion + 1}\r\n                                        state={this.state.answerState}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\r\nimport Layout from \"./hoc/Layout/Layout\";\r\nimport Quiz from './containers/Quiz/Quiz'\r\n\r\nfunction App() {\r\n    return (\r\n        <Layout>\r\n            <Quiz/>\r\n        </Layout>\r\n);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}